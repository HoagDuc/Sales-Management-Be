// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ptdn_net.Data;

#nullable disable

namespace ptdn_net.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ptdn_net.Data.Entity.CustomerEntity.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<long?>("CustomerGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_group_id");

                    b.Property<decimal?>("Debt")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("debt");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint")
                        .HasColumnName("district_id");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<decimal?>("Fax")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("fax");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_at");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modify_by");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint")
                        .HasColumnName("province_id");

                    b.Property<long?>("SubDistrictId")
                        .HasColumnType("bigint")
                        .HasColumnName("subdistrict_id");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("numeric")
                        .HasColumnName("tax");

                    b.Property<decimal?>("TotalExpenditure")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_expenditure");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("CustomerId")
                        .HasName("customer_pkey");

                    b.HasIndex("CustomerGroupId");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.CustomerEntity.CustomerGroup", b =>
                {
                    b.Property<long>("CustomerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("customer_group_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("CustomerGroupId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<short?>("Discount")
                        .HasColumnType("smallint")
                        .HasColumnName("discount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("CustomerGroupId")
                        .HasName("customer_group_pkey");

                    b.ToTable("customer_group", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.Inventory", b =>
                {
                    b.Property<long>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("InventoryId"));

                    b.Property<DateTime>("DispatchDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dispatch_date");

                    b.Property<long?>("MinQuantity")
                        .HasColumnType("bigint")
                        .HasColumnName("min_quantity");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("receipt_date");

                    b.HasKey("InventoryId")
                        .HasName("inventory_pkey");

                    b.HasIndex("ProductId");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.LocationEntity.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("DistrictId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("province_code");

                    b.HasKey("DistrictId")
                        .HasName("district_pkey");

                    b.ToTable("district", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.LocationEntity.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("province_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ProvinceId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("True: Active. False: Inactive");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("ProvinceId")
                        .HasName("province_pkey");

                    b.ToTable("province", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.LocationEntity.Subdistrict", b =>
                {
                    b.Property<int>("SubDistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subdistrict_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("SubDistrictId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("district_code")
                        .HasComment("Map bảng district trường code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("True: Active. False: Inactive");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("province_code")
                        .HasComment("Map bảng province trường code");

                    b.Property<string>("ShortName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("short_name");

                    b.HasKey("SubDistrictId")
                        .HasName("subdistrict_pkey");

                    b.ToTable("subdistrict", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Brand", b =>
                {
                    b.Property<long>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("brand_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("BrandId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("BrandId")
                        .HasName("brand_pkey");

                    b.ToTable("brand", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("category_pkey");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.File", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ContentSize")
                        .HasColumnType("integer");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("FileId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Image", b =>
                {
                    b.Property<long>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("image_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("ImageId"));

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.HasKey("ImageId")
                        .HasName("image_pkey");

                    b.HasIndex("FileId");

                    b.HasIndex("ProductId");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Origin", b =>
                {
                    b.Property<long>("OriginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("origin_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("OriginId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("OriginId")
                        .HasName("origin_pkey");

                    b.ToTable("origin", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("ProductId"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("barcode");

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint")
                        .HasColumnName("brand_id");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<decimal?>("CostPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cost_price");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<short?>("Discount")
                        .HasColumnType("smallint")
                        .HasColumnName("discount");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<long?>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnName("origin_id");

                    b.Property<decimal?>("RetailPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("retail_price");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("short_description");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("unit_id");

                    b.Property<decimal?>("Vat")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("vat");

                    b.Property<long?>("VendorId")
                        .HasColumnType("bigint")
                        .HasColumnName("vendor_id");

                    b.Property<float?>("Volume")
                        .HasColumnType("real")
                        .HasColumnName("volume");

                    b.Property<decimal?>("WholesalePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("wholesale_price");

                    b.HasKey("ProductId")
                        .HasName("product_pkey");

                    b.HasIndex(new[] { "BrandId" }, "IX_product_brand_id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_product_category_id");

                    b.HasIndex(new[] { "OriginId" }, "IX_product_origin_id");

                    b.HasIndex(new[] { "UnitId" }, "IX_product_unit_id");

                    b.HasIndex(new[] { "VendorId" }, "IX_product_vendor_id");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Unit", b =>
                {
                    b.Property<long>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("unit_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("UnitId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("UnitId")
                        .HasName("unit_pkey");

                    b.ToTable("unit", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Vendor", b =>
                {
                    b.Property<long>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("vendor_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("VendorId"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<decimal?>("Debt")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("debt");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint")
                        .HasColumnName("district_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<decimal?>("Fax")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("fax");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint")
                        .HasColumnName("province_id");

                    b.Property<long?>("SubDistrictId")
                        .HasColumnType("bigint")
                        .HasColumnName("subdistrict_id");

                    b.Property<decimal?>("Tax")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("tax");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("VendorId")
                        .HasName("vendor_pkey");

                    b.ToTable("vendor", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.SystemEntity.Permission", b =>
                {
                    b.Property<long>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("PermissionId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("PermissionId")
                        .HasName("permission_pkey");

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.SystemEntity.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("RoleId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("RoleId")
                        .HasName("role_pkey");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.SystemEntity.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("oct_role_authority_pkey");

                    b.HasIndex("PermissionId");

                    b.ToTable("oct_role_authority", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.SystemEntity.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fullname");

                    b.Property<short?>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender")
                        .HasComment("0 = Nam. 1 = Nữ. 2 = Etc.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasComment("t = Active. f = InActive.");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password")
                        .HasComment("Password mã hoá theo Bcrypt");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("user_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("order_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<decimal?>("AmountDue")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount_due");

                    b.Property<decimal?>("AmountPaid")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount_paid");

                    b.Property<decimal?>("AmountRemaining")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount_remaining");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<short?>("DeliveryMethod")
                        .HasColumnType("smallint")
                        .HasColumnName("delivery_method");

                    b.Property<short?>("Discount")
                        .HasColumnType("smallint")
                        .HasColumnName("discount");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_at");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modify_by");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<short>("PaymentMethod")
                        .HasColumnType("smallint")
                        .HasColumnName("payment_method");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<decimal?>("Tax")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("tax");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal?>("Vat")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("vat");

                    b.HasKey("OrderId")
                        .HasName("order_pkey");

                    b.HasIndex("CustomerId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.OrderDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<short?>("Discount")
                        .HasColumnType("smallint")
                        .HasColumnName("discount");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<short?>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("quantity");

                    b.HasKey("ProductId", "OrderId")
                        .HasName("order_detail_pkey");

                    b.HasIndex("OrderId");

                    b.ToTable("order_detail", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<short>("DeliveryMethod")
                        .HasColumnType("smallint")
                        .HasColumnName("delivery_method");

                    b.Property<DateTime>("PaymentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_at");

                    b.Property<decimal>("PaymentTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("payment_total");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.HasKey("PaymentId")
                        .HasName("payment_pkey");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("purchase_order_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<decimal?>("AmountDue")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount_due");

                    b.Property<decimal?>("AmountOther")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount_other");

                    b.Property<decimal?>("AmountPaid")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount_paid");

                    b.Property<decimal?>("AmountRemaining")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount_remaining");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp(6) without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delivery_date");

                    b.Property<short?>("Discount")
                        .HasColumnType("smallint")
                        .HasColumnName("discount");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_at");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modify_by");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("order_date");

                    b.Property<short?>("PaymentMethod")
                        .HasColumnType("smallint")
                        .HasColumnName("payment_method");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<decimal?>("Tax")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("tax");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal?>("Vat")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("vat");

                    b.Property<long?>("VendorId")
                        .HasColumnType("bigint")
                        .HasColumnName("vendor_id");

                    b.HasKey("PurchaseOrderId")
                        .HasName("purchase_order_pkey");

                    b.HasIndex("VendorId");

                    b.ToTable("purchase_order", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.PurchaseOrderDetail", b =>
                {
                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchase_order_id");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<short?>("Discount")
                        .HasColumnType("smallint")
                        .HasColumnName("discount");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<short?>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("quantity");

                    b.HasKey("PurchaseOrderId", "ProductId")
                        .HasName("purchase_order_detail_pkey");

                    b.HasIndex("ProductId");

                    b.ToTable("purchase_order_detail", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.RefundOrder", b =>
                {
                    b.Property<Guid>("RefundOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("refund_order_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("adress");

                    b.Property<decimal?>("AmountOther")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount_other");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modify_at");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modify_by");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<short?>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("quantity");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("RefundOrderId")
                        .HasName("refund_order_pkey");

                    b.HasIndex("OrderId");

                    b.ToTable("refund_order", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.RefundOrderDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("quantity");

                    b.Property<Guid>("RefundOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("refund_order_id")
                        .HasComment("map với bảng refund_order");

                    b.HasKey("ProductId")
                        .HasName("refund_order_detail_pkey");

                    b.HasIndex("RefundOrderId");

                    b.ToTable("refund_order_detail", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("transaction_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<long>("TransactionTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("transaction_type_id");

                    b.HasKey("TransactionId")
                        .HasName("transaction_pkey");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("transaction", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.TransactionType", b =>
                {
                    b.Property<long>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("transaction_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("TransactionTypeId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("TransactionTypeId")
                        .HasName("transaction_type_pkey");

                    b.ToTable("transaction_type", (string)null);
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.CustomerEntity.Customer", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.CustomerEntity.CustomerGroup", "CustomerGroup")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerGroupId")
                        .HasConstraintName("customer_customer_group_id_fkey");

                    b.Navigation("CustomerGroup");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.Inventory", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Image", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.File", "File")
                        .WithMany("Images")
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("image_file_id_fkey");

                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("image_product_id_fkey");

                    b.Navigation("File");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Product", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("product_brand_id_fkey");

                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("product_category_id_fkey");

                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.Origin", "Origin")
                        .WithMany("Products")
                        .HasForeignKey("OriginId")
                        .HasConstraintName("product_origin_id_fkey");

                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("product_unit_id_fkey");

                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("product_vendor_id_fkey");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Origin");

                    b.Navigation("Unit");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.SystemEntity.RolePermission", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.SystemEntity.Permission", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roau_permission_id");

                    b.HasOne("ptdn_net.Data.Entity.SystemEntity.Role", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roau_role_id");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.SystemEntity.User", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.SystemEntity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.Order", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.CustomerEntity.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("order_customer_id_fkey");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.OrderDetail", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.TransactionEntity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("order_detail_order_id_fkey");

                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("order_detail_product_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.PurchaseOrder", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("purchase_order_vendor_id_fkey");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.PurchaseOrderDetail", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("purchase_order_detail_product_id_fkey");

                    b.HasOne("ptdn_net.Data.Entity.TransactionEntity.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .IsRequired()
                        .HasConstraintName("purchase_order_detail_purchase_order_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.RefundOrder", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.TransactionEntity.Order", "Order")
                        .WithMany("RefundOrders")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("refund_order_order_id_fkey");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.RefundOrderDetail", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.ProductEntity.Product", "Product")
                        .WithOne("RefundOrderDetail")
                        .HasForeignKey("ptdn_net.Data.Entity.TransactionEntity.RefundOrderDetail", "ProductId")
                        .IsRequired()
                        .HasConstraintName("refund_order_detail_product_id_fkey");

                    b.HasOne("ptdn_net.Data.Entity.TransactionEntity.RefundOrder", "RefundOrder")
                        .WithMany("RefundOrderDetails")
                        .HasForeignKey("RefundOrderId")
                        .IsRequired()
                        .HasConstraintName("refund_order_detail_refund_order_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("RefundOrder");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.Transaction", b =>
                {
                    b.HasOne("ptdn_net.Data.Entity.TransactionEntity.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .IsRequired()
                        .HasConstraintName("transaction_transaction_type_id_fkey");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.CustomerEntity.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.CustomerEntity.CustomerGroup", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.File", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Origin", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Inventories");

                    b.Navigation("OrderDetails");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("RefundOrderDetail");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Unit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.ProductEntity.Vendor", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.SystemEntity.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.SystemEntity.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("RefundOrders");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.RefundOrder", b =>
                {
                    b.Navigation("RefundOrderDetails");
                });

            modelBuilder.Entity("ptdn_net.Data.Entity.TransactionEntity.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
